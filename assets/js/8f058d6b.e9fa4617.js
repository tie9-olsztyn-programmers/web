"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[3776],{7225:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>i,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"MERN - Fullstack/Routes dla Task","title":"Routes dla Tasks","description":"Zdefiniujemy \u015bcie\u017cki, pod kt\xf3rymi b\u0119dziemy odpytywa\u0107 baz\u0119 danych - zgodnie z zasadami RestAPI:","source":"@site/docs/5. MERN - Fullstack/4. Routes dla Task.mdx","sourceDirName":"5. MERN - Fullstack","slug":"/MERN - Fullstack/Routes dla Task","permalink":"/web/docs/MERN - Fullstack/Routes dla Task","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/5. MERN - Fullstack/4. Routes dla Task.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Routes dla Tasks"},"sidebar":"tutorialSidebar","previous":{"title":"Praca z mongoose - apka Task","permalink":"/web/docs/MERN - Fullstack/Praca z mongoose"},"next":{"title":"React Router","permalink":"/web/docs/Dodatkowe biblioteki/React Router"}}');var a=t(4848),o=t(8453);const r={title:"Routes dla Tasks"},d=void 0,i={},c=[{value:"<code>routes/taskRoutes.ts</code>",id:"routestaskroutests",level:2},{value:"Pod\u0142\u0105czamy routes do definicji Express",id:"pod\u0142\u0105czamy-routes-do-definicji-express",level:2},{value:"<code>app.ts</code>",id:"appts",level:2},{value:"Testujemy <code>/tests/tasks-requests.http</code>",id:"testujemy-teststasks-requestshttp",level:2},{value:"Dodajemy do <code>taskRoutes.ts</code>",id:"dodajemy-do-taskroutests",level:3},{value:"Testujemy",id:"testujemy",level:3},{value:"Dodajemy do <code>taskRoutes.ts</code>",id:"dodajemy-do-taskroutests-1",level:3},{value:"Testujemy",id:"testujemy-1",level:3}];function l(e){const s={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.p,{children:"Zdefiniujemy \u015bcie\u017cki, pod kt\xf3rymi b\u0119dziemy odpytywa\u0107 baz\u0119 danych - zgodnie z zasadami RestAPI:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"get"})," pod ",(0,a.jsx)(s.code,{children:"/"})]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"post"})," pod ",(0,a.jsx)(s.code,{children:"/"})]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"routestaskroutests",children:(0,a.jsx)(s.code,{children:"routes/taskRoutes.ts"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'\n\nimport express, {Request, Response} from "express";\nimport TaskModel , {Task} from "../models/Task";\n\nconst router = express.Router();\n\nrouter.get("/", async (req: Request, res: Response) => {\n    try{\n        const tasks: Array<Task> = await TaskModel.find();\n        res.json(tasks);\n    } catch(err){\n        res.status(500).json({error: `Nie uda\u0142o si\u0119 pobra\u0107 zada\u0144 ${err}`});\n    }\n})\n\nrouter.post("/", async(req: Request, res: Response) => {\n    try{\n        const {title, description} = req.body;\n        const newTask: Task | null = new TaskModel({title, description});\n        await newTask.save();\n        res.status(201).json({message: `Dodano nowe zadanie: ${newTask}`});\n\n    }catch(err){\n        res.status(500).json({error: "Nie uda\u0142o si\u0119 doda\u0107 zadania ", err});\n    }\n})\n\nexport default router;\n\n'})}),"\n",(0,a.jsx)(s.h2,{id:"pod\u0142\u0105czamy-routes-do-definicji-express",children:"Pod\u0142\u0105czamy routes do definicji Express"}),"\n",(0,a.jsx)(s.h2,{id:"appts",children:(0,a.jsx)(s.code,{children:"app.ts"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'//...\n\nimport taskRoutes from "./routes/taskRoutes";\n//...\n\n\n\n//....\napp.use(express.static(path.join(__dirname, "../public")));\napp.use("/tasks", taskRoutes)\n\n\n//...\n'})}),"\n",(0,a.jsxs)(s.h2,{id:"testujemy-teststasks-requestshttp",children:["Testujemy ",(0,a.jsx)(s.code,{children:"/tests/tasks-requests.http"})]}),"\n",(0,a.jsxs)(s.p,{children:["Webstorm ma wbudowanego klienta do testowania endpoint\xf3w RestApi.\nZamiast tego wbudowanego narz\u0119dzia mo\u017cna u\u017cywa\u0107 aplikacji ",(0,a.jsx)(s.em,{children:"Postman"}),"."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-http",metastring:"request",children:'\n\n### GET request to example server\nGET http://localhost:5000\nContent-Type: application/json\n###\n\n\n### GET request to example server\nGET http://localhost:5000/tasks\n\n###\n### POST request to example server\nPOST http://localhost:5000/tasks\nContent-Type: application/json\n\n{\n  "title": "12344nowe zadanie",\n  "description": "zr\xf3b to , a tamtego nie"\n}\n###\nPOST http://localhost:5000/tasks\nContent-Type: application/json\n\n{\n  "title": "nauczy\u0107 si\u0119 expressa",\n  "description": "od dzisiaj siadam i ucz\u0119 si\u0119 expressa - ka\u017cdego dnia"\n}\n###\n###  POST with Error\nPOST http://localhost:5000/tasks\nContent-Type: application/json\n\n{\n  "title": "nauczy\u0107 si\u0119 expressa"\n}\n###\n\n\n'})}),"\n",(0,a.jsx)(s.hr,{}),"\n",(0,a.jsxs)(s.h1,{id:"dodajemy-metod\u0119-put",children:["Dodajemy metod\u0119 ",(0,a.jsx)(s.code,{children:"put"})]}),"\n",(0,a.jsxs)(s.h3,{id:"dodajemy-do-taskroutests",children:["Dodajemy do ",(0,a.jsx)(s.code,{children:"taskRoutes.ts"})]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'router.put("/:id", async (req:Request, res: Response) => {\n    try{\n        const {id} = req.params;\n        console.log(id);\n        const updatedTask: Task|null = await TaskModel.findByIdAndUpdate(id, req.body, {new:true})\n        if(!updatedTask){\n            res.status(404).json({error: "Nie znaleziono zadania"})\n            return;\n        }\n        res.json({message: `zaktualizowano zadanie`, task: updatedTask});\n    }catch(err){\n        res.status(500).json({ error: \'Nie uda\u0142o si\u0119 zaktualizowa\u0107 zadania\' });\n    }\n})\n\n'})}),"\n",(0,a.jsx)(s.h3,{id:"testujemy",children:"Testujemy"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-http",metastring:"request",children:'\n\n### PUT "67d735db2b79664d210c9214" - to id dopasuje do w\u0142asnej bazy danych\nPUT http://localhost:5000/tasks/67d735db2b79664d210c9214\nContent-Type: application/json\n\n{\n  "title": "UPDATE tytu\u0142"\n}\n\n###\n\n\n\n'})}),"\n",(0,a.jsx)(s.hr,{}),"\n",(0,a.jsxs)(s.h1,{id:"dodajemy-metod\u0119-delete",children:["Dodajemy metod\u0119 ",(0,a.jsx)(s.code,{children:"delete"})]}),"\n",(0,a.jsxs)(s.h3,{id:"dodajemy-do-taskroutests-1",children:["Dodajemy do ",(0,a.jsx)(s.code,{children:"taskRoutes.ts"})]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'router.delete("/:id", async(req: Request, res: Response) => {\n    try{\n        const {id} = req.params;\n        const deletedTask = await TaskModel.findByIdAndDelete(id);\n        if(!deletedTask){\n            res.status(404).json({error: "Nie znaleziono zadania"})\n            return\n        }\n        res.json({message: `Usuni\u0119to zadanie: ${deletedTask}`});\n    }catch(err){\n        const error = err instanceof Error ? err : new Error("Nieznany b\u0142\u0105d")\n        res.status(500).json({error:`Nie usda\u0142o si\u0119 usun\u0105\u0107 zanadania ${error.message}`});\n    }\n})\n'})}),"\n",(0,a.jsx)(s.h3,{id:"testujemy-1",children:"Testujemy"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-http",metastring:"request",children:"### Delete 67d735db2b79664d210c9214\nDELETE http://localhost:5000/tasks/67d735db2b79664d210c9214\nContent-Type: application/json\n\n###\n"})})]})}function u(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>d});var n=t(6540);const a={},o=n.createContext(a);function r(e){const s=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(o.Provider,{value:s},e.children)}}}]);